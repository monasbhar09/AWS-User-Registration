{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template Sample template EIP_With_Association: This template shows how to associate an Elastic IP address with an Amazon EC2 instance - you can use this same technique to associate an EC2 instance with an Elastic IP Address that is not created inside the template by replacing the EIP reference in the AWS::EC2::EIPAssoication resource type with the IP address of the external EIP. **WARNING** This template creates an Amazon EC2 instance and an Elastic IP Address. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "ImgId": {
      "Description": "Image Id",
      "Type": "String"
    },
    "InstType": {
      "Description": "Instance type",
      "Type": "String"
    },
    "volumeSize": {
      "Description": "Volume size",
      "Type": "String"
    },
    "volumeType": {
      "Description": "Volume type",
      "Type": "String"
    },
    "keyName": {
      "Description": "Key name",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "securityGroupName": {
      "Description": "Security Group name",
      "Type": "String"
    },
    "hostedZoneId": {
      "Description": "Hosted Zone Id",
      "Type": "String"
    },
    "dnsName": {
      "Description": "DNS name",
      "Type": "String"
    },
    "bucketName": {
      "Description": "Bucket name",
      "Type": "String"
    },
    "recordSetType": {
      "Description": "Record set type",
      "Type": "String"
    },
    "recordSetTTL": {
      "Description": "Record set TTL",
      "Type": "String"
    },
    "VpcId": {
      "Description": "Amazon VPC ID",
      "Type": "String"
    },
    "subnetID": {
      "Description": "Private Subnet Id 1",
      "Type": "String"
    },
    "subnetID1": {
      "Description": "Private Subnet ID 2",
      "Type": "String"
    },
    "originalDomain": {
      "Type": "String"
    },
    "CertificateArnNumber": {
      "Type" : "String"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },


  "Resources":
  {
    "EC2Instance":
    {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties":
      {
        "ImageId": {"Ref": "ImgId"},
        "AssociatePublicIpAddress": true,
        "InstanceType": {"Ref": "InstType"},
        "IamInstanceProfile" : {"Ref": "insProfile"},
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "csye6225",
              "GroupId"
            ]
          }
        ],
        "UserData": {
          "Fn::Base64" : {
            "Fn::Join" : ["", [
              "#!/bin/bash -v\n",
              "export DEBIAN_FRONTEND=noninteractive\n",
              "apt-get update && apt-get upgrade -y\n",
              "apt-get -y install tomcat8 \n",
              "# Installing CodeDeploy Agent \n",
              "apt-get install python-pip -y \n",
              "apt-get install ruby -y \n",
              "apt-get install wget -y \n",
              "cd /home/ubuntu \n",
              "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
              "chmod +x ./install \n",
              "./install auto \n",
              "echo '#!/bin/sh' >> /usr/share/tomcat8/bin/setenv.sh \n",
              {
                "Fn::Join":["",
                  [
                    "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=\"jdbc:mysql://",
                    {
                      "Fn::GetAtt":["MyDBInstance","Endpoint.Address"]
                    },
                    ":3306/csye6225\"\"'>> /usr/share/tomcat8/bin/setenv.sh \n"
                  ]
                ]
              },
              "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=\"csye6225master\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
              "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=\"csye6225password\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
              "echo 'JAVA_OPTS=\"$JAVA_OPTS -DbucketName=\"",
              {
                "Ref":"bucketName"
              },
              "\"\"'>> /usr/share/tomcat8/bin/setenv.sh \n",
              "chmod +x /usr/share/tomcat8/bin/setenv.sh \n",
              "chown tomcat8:tomcat8 /usr/share/tomcat8/bin/setenv.sh \n",
              "cd /var/lib/tomcat8/webapps \n",
              "rm -r ROOT \n",
              "cd /home/ubuntu \n",
              "mkdir uploads \n",
              "chmod 777 uploads/ \n",
              "cd /home/ubuntu \n",
              "curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
              "chmod +x ./install \n",
              "./install auto \n",
              "sudo apt-get update -y\n",
              "sudo apt-get install python -y\n",
              "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O\n",
              "echo ' ' >> /home/ubuntu/awslogs.conf\n",
              "sudo python ./awslogs-agent-setup.py --region us-east-1 --non-interactive --configfile=/home/ubuntu/awslogs.conf\n",
              "sudo rm /home/ubuntu/awslogs.conf"
            ]]
          }
        },
        "KeyName": {"Ref": "keyName"},
        "BlockDeviceMappings" : [{"DeviceName" : "/dev/sda1","Ebs" : { "VolumeSize" : {"Ref": "volumeSize"} ,
          "VolumeType" : {"Ref": "volumeType"} }}]
      }
    },
    "insProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Roles":[
          {
            "Ref":"CodeDeployEC2ServiceRole",
            "Ref":"CloudWatchRole"
          }
        ]
      }
    },
    "LambdaExceutionRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "lambda.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns":["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/AmazonSESFullAccess"],
        "RoleName":"lambda-sns-execution-role"
      }
    },
    "CodeDeployEC2ServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "RoleName": "CodeDeployEC2ServiceRole",
        "ManagedPolicyArns":["arn:aws:iam::aws:policy/AmazonRDSFullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess"]
      }
    },
    "CodeDeployEC2toS3":{
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"CodeDeploy-EC2-S3",
        "PolicyDocument":{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        },
        "Roles":[
          {
            "Ref":"CodeDeployEC2ServiceRole"
          }
        ]
      }
    },

    "CloudWatchRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "RoleName": "CloudWatchRole",
        "ManagedPolicyArns":["arn:aws:iam::aws:policy/AmazonRDSFullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess"]
      }
    },
    "CloudWatchPolicy":{
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"CloudWatchLogsPolicy",
        "PolicyDocument":{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:Create*",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "s3:GetObject"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*",
                "arn:aws:s3:::*"
              ]
            }
          ]
        },
        "Roles":[
          {
            "Ref":"CloudWatchRole"
          }
        ]
      }
    },
    "MyDNSRecord" : {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {
          "Ref": "originalDomain"
        },
        "Comment": "DNS name for my instance.",
        "RecordSets": [
          {
            "Name": {
              "Ref": "originalDomain"
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "ApplicationLoadBalancer",
                  "CanonicalHostedZoneID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "ApplicationLoadBalancer",
                  "DNSName"
                ]
              }
            }
          }
        ]
      }
    },
    "csye6225":
    {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" :
      {
        "GroupName": {"Ref": "securityGroupName"},
        "VpcId" : {"Ref": "VpcId"} ,
        "GroupDescription" : "Allow hhtp to client",
        "SecurityGroupIngress" :
        [{
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : "0.0.0.0/0"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "8080",
          "ToPort" : "8080",
          "SourceSecurityGroupId": {
            "Fn::GetAtt": [
              "LoadBalancerSecurityGroup",
              "GroupId"
            ]
          }
        }]
      }
    },
    "Subnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref": "VpcId"},
        "CidrBlock": "172.31.128.0/20",
        "AvailabilityZone" : "us-east-1e"
      }
    },

    "Subnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref": "VpcId"},
        "CidrBlock": "172.31.112.0/20",
        "AvailabilityZone" : "us-east-1b"
      }
    },

    "Subnet3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref": "VpcId"},
        "CidrBlock": "172.31.100.0/20",
        "AvailabilityZone" : "us-east-1f"
      }
    },
    "AWSRDSDBSubnetGroup":{
      "Type"       :"AWS::RDS::DBSubnetGroup",
      "Properties" :{
        "DBSubnetGroupDescription":"RDS DB Subnet Group",
        "SubnetIds" : [{"Ref" : "Subnet1"},{"Ref" : "Subnet2"},{"Ref" : "Subnet3"}]
      }
    },
    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Open database for access",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "3306",
            "ToPort" : "3306",
            "SourceSecurityGroupId" :
            {
              "Fn::GetAtt": [ "csye6225", "GroupId" ]
            }
          }]
      }
    },
    "MyDBInstance" : {
      "Type":  "AWS::RDS::DBInstance",
      "Properties": {
        "DBName"                :  "csye6225",
        "Engine"                :  "mysql",
        "EngineVersion"         :  "5.6.35",
        "MultiAZ"               :  "false",
        "PubliclyAccessible"    :  "false",
        "StorageType"           :  "gp2",
        "MasterUsername"        :  "csye6225master",
        "DBInstanceClass"       :  "db.t2.medium",
        "DBInstanceIdentifier"  :  "csye6225-fall2017",
        "AllocatedStorage"      :  "10",
        "DBSubnetGroupName"     : {  "Ref" :  "AWSRDSDBSubnetGroup" },
        "MasterUserPassword"    :  "csye6225password",
        "VPCSecurityGroups"     : [ {  "Fn::GetAtt": [  "DBEC2SecurityGroup",  "GroupId" ] } ]
      }
    },
    "myDynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [
          {
            "AttributeName" :  "id",
            "AttributeType" :  "S"
          }],
        "KeySchema" : [
          {
            "AttributeName" :  "id",
            "KeyType" :  "HASH"
          }],
        "ProvisionedThroughput" :
        {
          "ReadCapacityUnits" :  "5",
          "WriteCapacityUnits" :  "5"
        },
        "TimeToLiveSpecification":
        {
          "AttributeName" : "ttl" ,
          "Enabled" : "TRUE"
        },
        "TableName" :  "csye6225"

      }
    },
    "myBucket": {
      "Type":  "AWS::S3::Bucket",
      "Properties": {
        "BucketName" :  {"Ref": "bucketName"}
      }
    },

    "SNS" : {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "password_reset"
      }
    },
    "MyServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier" :[{"Ref": "Subnet1"},{"Ref": "Subnet2"},{"Ref": "Subnet3"}],
        "LaunchConfigurationName": {"Ref": "EC2Instance"},
        "MinSize": "3",
        "MaxSize": "6",
        "TargetGroupARNs": [{"Ref": "ALBTargetGroup"}],
        "Tags": [{
          "Key": "NAME",
          "Value": "CSYE6225",
          "PropagateAtLaunch" : "true"
        }]
      },
      "DependsOn": [
        "ALBListener",
        "EC2Instance"
      ]
    },

    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates":[{"CertificateArn" : {"Ref": "CertificateArnNumber"}}],
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": {"Ref": "ALBTargetGroup"}
        }],
        "LoadBalancerArn": {"Ref": "ApplicationLoadBalancer"},
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },

    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "csye6225-fall2017-loadBalancer",
        "GroupDescription": "Rules For LoadBalancer",
        "VpcId": {"Ref": "VpcId"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIpv6": "::/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIpv6": "::/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "Subnets": [{"Ref": "Subnet1"},{"Ref": "Subnet2"},{"Ref": "Subnet3"}],
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}],
        "Tags": [{
          "Key": "NAME",
          "Value": "CSYE6225"
        }]
      }
    },


    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 40,
        "HealthCheckTimeoutSeconds": 30,
        "Protocol": "HTTP",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": "8080",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "Port": 8080,
        "VpcId": {"Ref": "VpcId"},
        "Tags": [
          {
            "Key": "NAME",
            "Value": "CSYE6225"
          }
        ]
      }
    }
  }
}
